#!/usr/bin/with-contenv bashio
# ==============================================================================
# Start the example service
# s6-overlay docs: https://github.com/just-containers/s6-overlay
# ==============================================================================

# Add your code here

# Declaring variables

#wait for nginx
#bashio::net.wait_for 8099

declare header
declare objectname
declare address
declare objectIdentifier
declare maxApduLenghtAccepted
declare segmentationSupported
declare vendorID
declare foreignBBMD
declare foreignTTL
declare maxSegmentsAccepted


hostname
hostname -i
hostname -d
hostname -f


# check IP forwarding (for UDP broadcasts)
sysctl net.ipv4.ip_forward
sysctl net.ipv4.icmp_echo_ignore_broadcasts
sysctl net.ipv4.conf.all.proxy_arp
sysctl net.ipv4.conf.all.bc_forwarding
sysctl net.ipv4.conf.eth0.bc_forwarding

# Check if the line net.ipv4.conf.eth0.bc_forwarding is present in the sysctl.conf file
if grep -q "^net.ipv4.conf.eth0.bc_forwarding" /etc/sysctl.conf; then
  # Replace the line with net.ipv4.conf.eth0.bc_forwarding = 1
  sed -i 's/^net.ipv4.conf.eth0.bc_forwarding.*/net.ipv4.conf.eth0.bc_forwarding = 1/' /etc/sysctl.conf
else
  # Add the line net.ipv4.conf.eth0.bc_forwarding = 1 to the end of the sysctl.conf file
  echo "net.ipv4.conf.eth0.bc_forwarding = 1" >> /etc/sysctl.conf
fi

# Apply the changes from the sysctl.conf file
sysctl -p

sysctl net.ipv4.conf.all.bc_forwarding
sysctl net.ipv4.conf.eth0.bc_forwarding

sysctl




#
# Getting Docker IP
#

dockerIP=$(hostname -i)


#
# Setting IP for INI file
#
if [ $(bashio::config 'address') = host ]
then
	IPvar="$extIP"
elif [ $(bashio::config 'address') = docker ]
then
	IPvar="$dockerIP"
else
	IPvar="$(bashio::config 'address')"
fi

#
# Assigning value to variables from HA config 
#
header='[BACpypes]'
objectname="objectName: $(bashio::config 'objectname')"
address="address: $IPvar"
objectIdentifier="objectIdentifier: $(bashio::config 'objectIdentifier')"
webServ="webServ: $(bashio::config 'webServ')"
maxApduLenghtAccepted="maxApduLengthAccepted: $(bashio::config 'maxApduLenghtAccepted')"
segmentationSupported="segmentationSupported: $(bashio::config 'segmentationSupported')"
vendorID="vendorIdentifier: $(bashio::config 'vendorID')"
foreignBBMD="foreignBBMD: $(bashio::config 'foreignBBMD')"
foreignTTL="foreignTTL: $(bashio::config 'foreignTTL')"
maxSegmentsAccepted="maxSegmentsAccepted: $(bashio::config 'maxSegmentsAccepted')"


#bashio::log.info "Added values"

#
# Generate INI file
#
printf '%s\n' "$header" "$objectname" "$address" "$objectIdentifier" "$webServ" "$maxApduLenghtAccepted" "$segmentationSupported" "$vendorID" "$foreignBBMD" "$foreignTTL" "$maxSegmentsAccepted" > BACpypes.ini
cat BACpypes.ini



bashio::log.info "Running interface"

exec python3 /usr/bin/main.py

bashio::log.info "After exec python"